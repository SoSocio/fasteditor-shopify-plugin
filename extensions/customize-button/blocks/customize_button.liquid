{% assign font = block.settings.text_font %}

<style>
  {{ font | font_face }}

  .fasteditor__button {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 10px 20px;

    background-color: {{ block.settings.bg-color }};
    color: {{ block.settings.text_color }};
    font-size: {{ block.settings.text_size }}px;
    font-family: {{ font.family }},{{ font.fallback_families }};

    border-width: {{ block.settings.border_width }}px;
    border-style: solid;
    border-color: {{ block.settings.border_color }};
    border-radius: {{ block.settings.border_radius }}px;
    cursor: pointer;
    transition: opacity .1s ease-in-out;
  }

  .fasteditor__button:hover {
    opacity: .8;
  }
</style>

{% if request.design_mode or product.tags contains "fasteditor" %}
  <div class="fasteditor">
    <button class="fasteditor__button">
      {{ block.settings.text }}
    </button>
  </div>
{% endif %}

<script>
  function getUserIdFromCookie() {
    const cookieName = "fasteditor_userid";
    const match = document.cookie.match(new RegExp("(^| )" + cookieName + "=([^;]+)"));
    return match ? match[2] : null;
  }

  function setUserIdToCookie(userId) {
    const expiration = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toUTCString(); // 30 днів
    document.cookie = `fasteditor_userid=${userId}; expires=${expiration}; path=/`;
  }

  function getOrCreateUserId() {
    let userId = getUserIdFromCookie();
    if (!userId) {
      userId = crypto.randomUUID();
      setUserIdToCookie(userId);
    }
    return userId;
  }

  window.addEventListener("load", function () {
    const button = document.querySelector(".fasteditor__button");
    if (!button) return;

    button.addEventListener("click", async function () {
      const userId = getOrCreateUserId();

      const langCode = navigator.language.split("-")[0];

      const quantityInput = document.querySelector('input[name="quantity"]');
      const quantity = quantityInput ? parseInt(quantityInput.value, 10) : 1;

      const currencyMeta = document.querySelector('meta[property="og:price:currency"]');
      const currency = currencyMeta ? currencyMeta.getAttribute("content") : "{{ shop.currency }}";

      try {
        const response = await fetch("/apps/fasteditor-app/app/smartlink", {
          method: "POST",
          headers: {"Content-Type": "application/json"},
          body: JSON.stringify({
            shop: "{{ shop.permanent_domain }}",
            userId: userId,
            sku: "{{ product.variants.first.sku | escape }}",
            language: langCode,
            // country: "",
            currency: currency,
            custom_attributes: [],
            // projectId: "",
            quantity: quantity,
          }),
        });

        const data = await response.json();

        if (data.ok && data.body?.url) {
          window.location.href = data.body.url;
        } else {
          console.error("SmartLink error:", data);
          alert("Failed to create SmartLink");
        }
      } catch (error) {
        console.error("SmartLink request failed:", error);
      }
    });
  });
</script>


{% schema %}
{
  "name": "Customize Button",
  "target": "section",
  "enabled_on": {
    "templates": [
      "product"
    ]
  },
  "settings": [
    {
      "type": "color",
      "id": "bg-color",
      "label": "Button background color",
      "default": "#000000"
    },
    {
      "type": "text",
      "id": "text",
      "label": "Button text",
      "default": "Customize"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "text_size",
      "min": 8,
      "max": 64,
      "step": 1,
      "unit": "px",
      "label": "Font size",
      "default": 16
    },
    {
      "type": "font_picker",
      "id": "text_font",
      "label": "Text font",
      "default": "helvetica_n4"
    },
    {
      "type": "range",
      "id": "border_width",
      "min": 0,
      "max": 99,
      "step": 1,
      "unit": "px",
      "label": "Border width",
      "default": 0
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 99,
      "step": 1,
      "unit": "px",
      "label": "Border radius",
      "default": 0
    }
  ]
}
{% endschema %}

